# Yasinga — Secure M‑Pesa Expense Tracker (Mobile‑First PWA)

**Goal:** Build a beautiful, secure, mobile‑first web app (installable like a native app) that **automatically captures M‑Pesa transactions**, **categorizes** them via saved rules, and **stores a short purpose/note** — with **minimum taps**. Everything else is secondary.

---

## 0) Features — only what supports “fast, accurate, effortless”

* **Auto‑ingest M‑Pesa transactions** (from Android companion or Daraja webhook) → backend API → Supabase DB.
* **Rule engine**: once you tag a payee/number/till/paybill, future transactions are **auto‑categorized** and assigned a **purpose template**.
* **Quick purpose**: 1‑tap purpose chips (Tomatoes, Chicken, Cooking Oil, Salaries, Rent, Utilities, Misc). Add a new purpose in <5 seconds.
* **Fast notes**: optional 60‑char note field; never blocks save.
* **Business vs Personal**: inferred from rules (Friends/Family → Personal; Suppliers → Business). Always override‑able in 1 tap.
* **Mobile‑first UI** (PWA): large touch targets, swipe actions, offline cache, splash screen, “Add to Home screen”. Fully branded **Yasinga**.
* **Reports**: Simple. Today / This Week / This Month totals + split by category + Business vs Personal. CSV/PDF export.

Security & Privacy first (see Section 5).

---

## 1) Tech Stack

* **Frontend**: React + Vite + TailwindCSS → PWA (manifest + service worker). Mobile UI components only.
* **Backend**: Node.js (Express) with strict input validation (Zod), JWT auth (Supabase Auth), rate‑limited endpoints.
* **Database**: Supabase Postgres with **Row Level Security** (RLS) on every table. Storage disabled unless needed.
* **Auth**: Supabase Auth (email/password or magic link). Optional phone OTP later.

> **Why this matters:** Replit can host both frontend and backend quickly. Supabase gives secure, scalable DB with RLS.

---

## 2) Environment Variables (Replit & Server)

Create a `.env` in Replit:

```
# Supabase
SUPABASE_URL="https://YOUR_PROJECT.supabase.co"
SUPABASE_ANON_KEY="YOUR_PUBLIC_ANON_KEY"
SUPABASE_SERVICE_ROLE="YOUR_SERVICE_ROLE_KEY"  # server only; never ship to client

# JWT / Cookies
JWT_SECRET="a-long-random-secret"
COOKIE_NAME="yasinga_session"

# CORS
ALLOWED_ORIGIN="https://YOUR_REPLIT_URL.repl.co"

# Optional: Daraja (if you integrate later)
DARAJA_CONSUMER_KEY="..."
DARAJA_CONSUMER_SECRET="..."
DARAJA_PASSKEY="..."
DARAJA_SHORTCODE="..."

# Telemetry
LOG_LEVEL="info"
```

> Keep `SERVICE_ROLE` **server‑only**. Never expose it in frontend builds.

---

## 3) Supabase Schema (SQL) — Minimal, Secure, Rule‑Driven

Run in Supabase SQL editor. **RLS is ON** for all tables.

```sql
-- 3.1 Enable extensions
create extension if not exists "uuid-ossp";

-- 3.2 Auth helper function
create or replace function public.current_user_id()
returns uuid language sql stable as $$
  select auth.uid();
$$;

-- 3.3 Users profile (optional)
create table if not exists public.profiles (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid unique not null default public.current_user_id(),
  business_name text default 'Yasinga',
  created_at timestamptz default now()
);

-- 3.4 Categories & Purposes
create table if not exists public.categories (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid not null default public.current_user_id(),
  name text not null, -- e.g., Ingredients, Beverages, Salaries, Rent, Utilities, Personal, Misc
  is_business boolean not null default true, -- false => personal
  created_at timestamptz default now()
);

create table if not exists public.purposes (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid not null default public.current_user_id(),
  name text not null,     -- e.g., Tomatoes, Chicken, Cooking Oil
  category_id uuid references public.categories(id) on delete set null,
  created_at timestamptz default now()
);

-- 3.5 Rules determine auto categorization
create table if not exists public.rules (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid not null default public.current_user_id(),
  match_type text not null check (match_type in ('PAYEE_NAME','PHONE','TILL','PAYBILL','TX_TYPE')),
  match_value text not null, -- normalized value e.g., 'MAMA MBOGA LTD'
  category_id uuid references public.categories(id) on delete set null,
  purpose_id uuid references public.purposes(id) on delete set null,
  is_personal boolean, -- allow override of business flag quickly
  notes_template text, -- optional default note
  created_at timestamptz default now(),
  unique (user_id, match_type, match_value)
);

-- 3.6 Transactions (single source of truth)
create table if not exists public.transactions (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid not null default public.current_user_id(),
  tx_time timestamptz not null,
  direction text not null check (direction in ('IN','OUT')),
  amount numeric(14,2) not null,
  currency text default 'KES',
  payee_name text,       -- normalized merchant/person name
  payee_phone text,      -- msisdn (masked or hashed if preferred)
  channel text,          -- 'M-PESA'
  tx_type text,          -- 'SEND','BUYGOODS','PAYBILL','WITHDRAW','DEPOSIT','REVERSAL','AIRTIME'
  reference text,        -- M-Pesa receipt no
  raw_sms text,          -- stored encrypted at rest (optional)
  category_id uuid references public.categories(id) on delete set null,
  purpose_id uuid references public.purposes(id) on delete set null,
  is_personal boolean,   -- derived from category or rule, override-able
  note text,
  created_at timestamptz default now()
);

-- 3.7 Loans (optional, off by default)
create table if not exists public.loans (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid not null default public.current_user_id(),
  borrower_name text not null,
  borrower_phone text,
  principal numeric(14,2) not null,
  balance numeric(14,2) not null,
  created_at timestamptz default now(),
  closed_at timestamptz
);

create table if not exists public.loan_repayments (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid not null default public.current_user_id(),
  loan_id uuid not null references public.loans(id) on delete cascade,
  amount numeric(14,2) not null,
  tx_id uuid references public.transactions(id) on delete set null,
  created_at timestamptz default now()
);

-- 3.8 Minimal audit log
create table if not exists public.audit_logs (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid,
  action text not null,
  entity text,
  entity_id uuid,
  meta jsonb,
  created_at timestamptz default now()
);

-- 3.9 RLS policies
alter table public.profiles enable row level security;
alter table public.categories enable row level security;
alter table public.purposes enable row level security;
alter table public.rules enable row level security;
alter table public.transactions enable row level security;
alter table public.loans enable row level security;
alter table public.loan_repayments enable row level security;
alter table public.audit_logs enable row level security;

create policy "user_can_manage_own" on public.profiles
for all using (user_id = auth.uid()) with check (user_id = auth.uid());

create policy "user_tables_select" on public.categories
for select using (user_id = auth.uid());
create policy "user_tables_modify" on public.categories
for insert with check (user_id = auth.uid());
create policy "user_tables_update" on public.categories
for update using (user_id = auth.uid());
create policy "user_tables_delete" on public.categories
for delete using (user_id = auth.uid());

-- repeat same pattern for purposes, rules, transactions, loans, repayments, audit_logs
create policy "purposes_select" on public.purposes for select using (user_id = auth.uid());
create policy "purposes_modify" on public.purposes for insert with check (user_id = auth.uid());
create policy "purposes_update" on public.purposes for update using (user_id = auth.uid());
create policy "purposes_delete" on public.purposes for delete using (user_id = auth.uid());

create policy "rules_select" on public.rules for select using (user_id = auth.uid());
create policy "rules_modify" on public.rules for insert with check (user_id = auth.uid());
create policy "rules_update" on public.rules for update using (user_id = auth.uid());
create policy "rules_delete" on public.rules for delete using (user_id = auth.uid());

create policy "tx_select" on public.transactions for select using (user_id = auth.uid());
create policy "tx_insert" on public.transactions for insert with check (user_id = auth.uid());
create policy "tx_update" on public.transactions for update using (user_id = auth.uid());
create policy "tx_delete" on public.transactions for delete using (user_id = auth.uid());

create policy "loans_select" on public.loans for select using (user_id = auth.uid());
create policy "loans_modify" on public.loans for insert with check (user_id = auth.uid());
create policy "loans_update" on public.loans for update using (user_id = auth.uid());
create policy "loans_delete" on public.loans for delete using (user_id = auth.uid());

create policy "repay_select" on public.loan_repayments for select using (user_id = auth.uid());
create policy "repay_modify" on public.loan_repayments for insert with check (user_id = auth.uid());
create policy "repay_update" on public.loan_repayments for update using (user_id = auth.uid());
create policy "repay_delete" on public.loan_repayments for delete using (user_id = auth.uid());

create policy "audit_select" on public.audit_logs for select using (user_id = auth.uid());
create policy "audit_insert" on public.audit_logs for insert with check (user_id = auth.uid());
```

> **Note:** You can optionally **hash phone numbers** before insert to minimize PII risk.

---

## 4) Backend (Express) — Endpoints & Security

**Install packages**

```bash
npm i express cors helmet morgan zod jsonwebtoken rate-limiter-flexible
npm i @supabase/supabase-js dotenv
```

**Server skeleton** (`server/index.js`)

```js
import 'dotenv/config'
import express from 'express'
import helmet from 'helmet'
import cors from 'cors'
import morgan from 'morgan'
import jwt from 'jsonwebtoken'
import { createClient } from '@supabase/supabase-js'
import { z } from 'zod'

const app = express()
app.use(helmet())
app.use(express.json({ limit: '512kb' }))
app.use(cors({ origin: process.env.ALLOWED_ORIGIN, credentials: true }))
app.use(morgan(process.env.LOG_LEVEL || 'dev'))

const supabaseAdmin = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE)

// Auth middleware (expects Authorization: Bearer <jwt from Supabase>)
const requireAuth = asy
```
